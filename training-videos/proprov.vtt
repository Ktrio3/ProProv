WEBVTT
Kind: captions
Language: en

00:00:01.120 --> 00:00:03.440
This training session will cover ProProv.

00:00:05.920 --> 00:00:09.600
ProProv is a language and system&nbsp;
for specifying provenance policies&nbsp;&nbsp;

00:00:09.600 --> 00:00:12.720
over graphs representing the&nbsp;
provenance of secure computations.&nbsp;&nbsp;

00:00:13.360 --> 00:00:18.080
Policies in ProProv can be expressed as logical&nbsp;
statements or predicates over provenance graphs.&nbsp;&nbsp;

00:00:18.880 --> 00:00:23.280
ProProv also contains a graphical user&nbsp;
interface to specify and test policies.

00:00:25.680 --> 00:00:28.960
Now let's introduce the syntax&nbsp;
of the ProProv language.&nbsp;&nbsp;

00:00:28.960 --> 00:00:34.160
We use t as a generic variable to range over&nbsp;
the possible province node types which include:&nbsp;&nbsp;

00:00:34.160 --> 00:00:41.360
account agent, node agent, agent, data entity,&nbsp;
contract entity, key entity, entity, and activity.&nbsp;&nbsp;

00:00:41.360 --> 00:00:45.360
The agent type means that the node can be&nbsp;
either an account agent or a node agent.&nbsp;&nbsp;

00:00:45.360 --> 00:00:50.480
The entity type means that the node can be either&nbsp;
a data entity, a contract entity, or a key entity.

00:00:51.200 --> 00:00:55.360
Next, we use e as a generic variable&nbsp;
to range over possible edge labels&nbsp;&nbsp;

00:00:55.360 --> 00:01:00.880
which are the provenance relations between nodes.&nbsp;
The possible edge labels are: was derived from,&nbsp;&nbsp;

00:01:00.880 --> 00:01:06.800
was attributed to, was generated by, used,&nbsp;
acted on behalf of, and was associated with.&nbsp;&nbsp;

00:01:07.520 --> 00:01:12.240
Next, we use x as a generic variable to range&nbsp;
over variable names which can be any string.&nbsp;&nbsp;

00:01:12.960 --> 00:01:17.920
Next, we use n as a generic variable to arrange&nbsp;
over provenance node names which can also be any&nbsp;&nbsp;

00:01:17.920 --> 00:01:23.120
string, and we use p as a generic variable to&nbsp;
range over provenance policies, which can be:&nbsp;&nbsp;

00:01:23.120 --> 00:01:28.720
the negation of a policy p, the conjunction of&nbsp;
two policies, the disjunction of two policies,&nbsp;&nbsp;

00:01:28.720 --> 00:01:32.560
the for all keyword followed by&nbsp;
a variable, a colon, a type t,&nbsp;&nbsp;

00:01:32.560 --> 00:01:38.320
a dot, and a policy p and can be&nbsp;
pronounced "for all x of type t p holds".

00:01:38.320 --> 00:01:44.320
Next, a policy can consist of the exists keyword&nbsp;
followed by a variable, a colon, a type t, a dot,&nbsp;&nbsp;

00:01:44.320 --> 00:01:49.520
and a policy p and can be pronounced "there&nbsp;
exists an x of type t such that p holds".

00:01:50.080 --> 00:01:55.440
Next, the policy p1 can imply a policy p2,&nbsp;
and lastly, a policy can consist of an edge&nbsp;&nbsp;

00:01:55.440 --> 00:01:59.600
label followed by two nodes separated&nbsp;
by a comma and enclosed in parentheses.

00:02:02.160 --> 00:02:08.240
The negation policy asserts that policy p is not&nbsp;
true. We can specify a negation policy using the&nbsp;&nbsp;

00:02:08.240 --> 00:02:13.520
graphical user interface by clicking the drop-down&nbsp;
policy menu and selecting not. After making the&nbsp;&nbsp;

00:02:13.520 --> 00:02:18.080
selection, another drop-down menu will appear&nbsp;
for another policy selection. The pane at the&nbsp;&nbsp;

00:02:18.080 --> 00:02:22.800
bottom right of the screen will print the policy&nbsp;
in the ProProv language as it is constructed.

00:02:24.480 --> 00:02:31.120
The conjunction policy, also called "logical&nbsp;
and", asserts that both policy p1 and p2 are true.&nbsp;&nbsp;

00:02:31.120 --> 00:02:34.960
This policy can be specified using the&nbsp;
interface by clicking the policy drop-down&nbsp;&nbsp;

00:02:34.960 --> 00:02:41.040
menu and selecting and. After this selection,&nbsp;
two more policy menus will appear for p1 and p2.

00:02:42.720 --> 00:02:48.240
The disjunction policy, also called "logical&nbsp;
or", asserts that either policy p1 is true&nbsp;&nbsp;

00:02:48.240 --> 00:02:53.360
policy, p2 is true, or both p1 and p2&nbsp;
are true. This policy can be specified&nbsp;&nbsp;

00:02:53.360 --> 00:02:57.200
using the interface by clicking the&nbsp;
policy drop-down menu and selecting or.&nbsp;&nbsp;

00:02:57.200 --> 00:03:04.320
After this selection, two more policy&nbsp;
menus will appear for p1 and p2

00:03:04.320 --> 00:03:10.960
The universal policy asserts that policy p is true&nbsp;
for every provenance node of type t. Variable x&nbsp;&nbsp;

00:03:10.960 --> 00:03:16.720
can be used in p. This policy can be specified&nbsp;
using the interface by selecting for all.&nbsp;&nbsp;

00:03:16.720 --> 00:03:21.440
After this selection, three boxes will appear:&nbsp;
a typable box to enter a variable name,&nbsp;&nbsp;

00:03:21.440 --> 00:03:26.080
a drop-down menu to select a provenance node&nbsp;
type, and a drop-down menu to select a policy.

00:03:28.160 --> 00:03:33.200
The existential policy asserts that policy p&nbsp;
is true for some provenance node of type t.&nbsp;&nbsp;

00:03:33.760 --> 00:03:39.840
Variable x can be used in p. This policy can be&nbsp;
specified using the interface by selecting exists.&nbsp;&nbsp;

00:03:39.840 --> 00:03:44.400
After this selection, three boxes will appear:&nbsp;
a typable box to enter a variable name,&nbsp;&nbsp;

00:03:44.400 --> 00:03:48.880
a drop-down menu to select a provenance node&nbsp;
type, and a drop-down menu to select a policy.

00:03:50.800 --> 00:03:56.400
The implication policy asserts that if&nbsp;
policy p1 is true then policy p2 is true.&nbsp;&nbsp;

00:03:56.400 --> 00:04:00.400
This policy can be specified using&nbsp;
the interface by selecting implies.&nbsp;&nbsp;

00:04:00.400 --> 00:04:04.720
After the selection, two boxes will&nbsp;
appear for policy p1 and policy p2.

00:04:06.800 --> 00:04:12.960
The edge policy asserts that there is an edge with&nbsp;
label e between node n1 and node n2, where e can&nbsp;&nbsp;

00:04:12.960 --> 00:04:18.880
be any one of six provenance relations, which&nbsp;
includes was attributed to, was derived from,&nbsp;&nbsp;

00:04:18.880 --> 00:04:23.840
was generated by, used, acted on&nbsp;
behalf of, and was associated with.&nbsp;&nbsp;

00:04:23.840 --> 00:04:27.760
This policy can be specified by&nbsp;
selecting any one of the edge relations.&nbsp;&nbsp;

00:04:27.760 --> 00:04:32.000
After the selection is made, two boxes&nbsp;
will appear for node n1 and node n2.

00:04:34.480 --> 00:04:39.200
Now let's look at some examples of how we can&nbsp;
construct provenance policies using the ProProv&nbsp;&nbsp;

00:04:39.200 --> 00:04:43.680
interface. During this study, the panel on the&nbsp;
right will have five input provenance graphs&nbsp;&nbsp;

00:04:43.680 --> 00:04:47.760
to test your policy on. A graph that has a&nbsp;
green checkmark means that the graph should&nbsp;&nbsp;

00:04:47.760 --> 00:04:53.120
satisfy your policy. A graph that has a red&nbsp;
X means the graph should violate your policy.&nbsp;&nbsp;

00:04:53.120 --> 00:04:57.760
Lastly, ProProv is case insensitive; this&nbsp;
means that when typing provenance object names,&nbsp;&nbsp;

00:04:57.760 --> 00:05:00.960
it does not matter whether you&nbsp;
use upper or lower case letters.

00:05:00.960 --> 00:05:03.920
Now let's construct a policy&nbsp;
to ensure the activity average&nbsp;&nbsp;

00:05:03.920 --> 00:05:08.720
used data entity SalaryB. We can&nbsp;
construct this policy by selecting used,&nbsp;&nbsp;

00:05:08.720 --> 00:05:13.120
then typing average as the source node&nbsp;
and salary b as the destination node.&nbsp;&nbsp;

00:05:13.120 --> 00:05:17.360
We can then evaluate our policy on the input&nbsp;
graphs by clicking the evaluate button.

00:05:19.200 --> 00:05:24.160
Next, we want to write a policy to ensure that&nbsp;
data entity AverageSalary was not derived from&nbsp;&nbsp;

00:05:24.160 --> 00:05:30.800
SalaryC. We can construct this policy by first&nbsp;
selecting not, then selecting was derived from.&nbsp;&nbsp;

00:05:30.800 --> 00:05:37.840
Then we can type AverageSalary as the source node&nbsp;
and we can type SalaryC as the destination node.

00:05:47.040 --> 00:05:51.680
Next, we want to write a policy to ensure&nbsp;
the activity Average used key entity KeyB&nbsp;&nbsp;

00:05:51.680 --> 00:05:57.200
and KeyB was attributed to account agent Bob.&nbsp;
We can construct this policy by selecting and.&nbsp;&nbsp;

00:05:57.200 --> 00:06:01.680
Then for the first policy box, we can select&nbsp;
used and type Average for the source node,&nbsp;&nbsp;

00:06:03.360 --> 00:06:09.920
and KeyB for the destination node. For the&nbsp;
second policy, we can select was attributed to&nbsp;&nbsp;

00:06:09.920 --> 00:06:19.840
and type KeyB for the source node&nbsp;
and Bob for the destination node.

00:06:23.440 --> 00:06:27.040
Next, we want to write a policy to&nbsp;
ensure that there is some data entity&nbsp;&nbsp;

00:06:27.040 --> 00:06:33.040
that AverageSalary was derived from. We can&nbsp;
construct this policy by first selecting exists.&nbsp;&nbsp;

00:06:33.040 --> 00:06:37.680
We then enter a variable name, which we choose&nbsp;
to be d, we select the appropriate type,&nbsp;&nbsp;

00:06:37.680 --> 00:06:42.080
which is data entity, and for the&nbsp;
policy we select was derived from.&nbsp;&nbsp;

00:06:42.080 --> 00:06:47.840
For the source node, we type average salary,&nbsp;
and for the destination node, we select d.

00:06:54.880 --> 00:06:59.680
Next, we want to write a policy to ensure&nbsp;
for every data entity, if activity average&nbsp;&nbsp;

00:06:59.680 --> 00:07:05.280
used the data entity, then the data entity was&nbsp;
attributed to either Bob, Alice, or Mallory.&nbsp;&nbsp;

00:07:05.280 --> 00:07:11.040
To construct this policy, we first select for&nbsp;
all. We then enter a variable name d, select the&nbsp;&nbsp;

00:07:11.040 --> 00:07:17.200
appropriate type, which is data entity, and select&nbsp;
the implies policy. Then for the first policy,&nbsp;&nbsp;

00:07:17.200 --> 00:07:22.800
we select used and type average as the source&nbsp;
node, and select d as the destination node.&nbsp;&nbsp;

00:07:25.520 --> 00:07:30.080
For the second policy, we select&nbsp;
or, then select was attributed to&nbsp;&nbsp;

00:07:30.080 --> 00:07:35.680
for the first policy and select d as the source&nbsp;
node and type Bob for the destination node.&nbsp;&nbsp;

00:07:41.360 --> 00:07:46.240
For the second policy, we select or and for&nbsp;
the first policy we select was attributed to&nbsp;&nbsp;

00:07:46.240 --> 00:07:51.600
for the first policy and select d for the source&nbsp;
node and type Alice for the destination node,&nbsp;&nbsp;

00:07:56.080 --> 00:08:00.000
and for the second policy, we select&nbsp;
was attributed to and select d&nbsp;&nbsp;

00:08:00.000 --> 00:08:11.840
for the source node and type&nbsp;
Mallory for the destination node.

00:08:16.880 --> 00:08:19.520
If during this study you type an incorrect policy,&nbsp;&nbsp;

00:08:19.520 --> 00:08:24.320
ProProv will indicate on which graphs your&nbsp;
policy did not succeed. You can then click ok,&nbsp;&nbsp;

00:08:24.320 --> 00:08:28.400
after which you can try again or click save&nbsp;
and continue to proceed to the next question.

00:08:28.960 --> 00:08:31.440
This concludes the ProProv training.

